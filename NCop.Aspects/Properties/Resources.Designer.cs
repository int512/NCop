//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NCop.Aspects.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NCop.Aspects.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OnActionBoundaryAspcets are valid only on method that has return type of  void. Use one of the OnFunctionBoundaryAspcets types..
        /// </summary>
        internal static string ActionAspectMismatch {
            get {
                return ResourceManager.GetString("ActionAspectMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} has different set of parameters than the parameters of one of its annotated aspects..
        /// </summary>
        internal static string AspectMethodParametersMismatach {
            get {
                return ResourceManager.GetString("AspectMethodParametersMismatach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property {0} has different property type than the one of its annotated aspects..
        /// </summary>
        internal static string AspectPropertyParameterMismatach {
            get {
                return ResourceManager.GetString("AspectPropertyParameterMismatach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method {0} has a different return type than the return type of one of its annotated aspects..
        /// </summary>
        internal static string AspectReturnTypeMismatch {
            get {
                return ResourceManager.GetString("AspectReturnTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {0} does not have a default constructor..
        /// </summary>
        internal static string AspectsDefaultCtorHasNotBeenFound {
            get {
                return ResourceManager.GetString("AspectsDefaultCtorHasNotBeenFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Emit load local address in top aspect is not permitted..
        /// </summary>
        internal static string EmitLoadLocalAddressAtTopAspectIsInvalid {
            get {
                return ResourceManager.GetString("EmitLoadLocalAddressAtTopAspectIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OnFunctionBoundaryAspcets are valid only on method that has return type other than void. Use one of the OnActionBoundaryAspect types..
        /// </summary>
        internal static string FunctionAspectMismatch {
            get {
                return ResourceManager.GetString("FunctionAspectMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annotaion of OnMethodBoundaryAspect and MethodInterceptionAspect are valid only on methods..
        /// </summary>
        internal static string IllegalMethodAspectAnnotation {
            get {
                return ResourceManager.GetString("IllegalMethodAspectAnnotation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annotaion of PropertyInterceptionAspect are valid only on properties..
        /// </summary>
        internal static string IllegalPropertyAspectAnnotation {
            get {
                return ResourceManager.GetString("IllegalPropertyAspectAnnotation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MethodInterceptionAspectAttribute can only be initialized with IMethodInterceptionAspect as an aspect type..
        /// </summary>
        internal static string MethodInterceptionAspectAttributeErrorInitialization {
            get {
                return ResourceManager.GetString("MethodInterceptionAspectAttributeErrorInitialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OnMethodBoundaryAspectAttribute can only be initialized with IOnMethodBoundaryAspect as an aspect type..
        /// </summary>
        internal static string OnMethodBoundaryAspectAttributeErrorInitialization {
            get {
                return ResourceManager.GetString("OnMethodBoundaryAspectAttributeErrorInitialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OnMethodBoundaryAspectAttribute can only be initialized with IOnMethodBoundaryAspect as an aspect type..
        /// </summary>
        internal static string OnMethodBoundaryAspectAttributeErrorInitialization1 {
            get {
                return ResourceManager.GetString("OnMethodBoundaryAspectAttributeErrorInitialization1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PropertyInterceptionAspectAttribute can only be initialized with IPropertyInterceptionAspect as an aspect type..
        /// </summary>
        internal static string PropertyInterceptionAspectAttributeErrorInitialization {
            get {
                return ResourceManager.GetString("PropertyInterceptionAspectAttributeErrorInitialization", resourceCulture);
            }
        }
    }
}
