// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by NCop Copyright ©
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated
// ------------------------------------------------------------------------------
namespace NCop.Aspects.Extensions
{
    using NCop.Aspects.Engine;
    using System;
    using System.Collections.Generic;

	internal static class MethodBindingResolver
	{
		internal static readonly IDictionary<int, Type> ActionBindingMap = null;
		internal static readonly IDictionary<int, Type> FuncionBindingMap = null;
 
 		static MethodBindingResolver() {
			FuncionBindingMap = new Dictionary<int, Type>();
			ActionBindingMap = new Dictionary<int, Type>();

			ActionBindingMap.Add(0, typeof(IActionBinding<>));				

			ActionBindingMap.Add(1, typeof(IActionBinding<,>));	
			FuncionBindingMap.Add(1, typeof(IFunctionBinding<,>));	

			ActionBindingMap.Add(2, typeof(IActionBinding<,,>));	
			FuncionBindingMap.Add(2, typeof(IFunctionBinding<,,>));	

			ActionBindingMap.Add(3, typeof(IActionBinding<,,,>));	
			FuncionBindingMap.Add(3, typeof(IFunctionBinding<,,,>));	

			ActionBindingMap.Add(4, typeof(IActionBinding<,,,,>));	
			FuncionBindingMap.Add(4, typeof(IFunctionBinding<,,,,>));	

			ActionBindingMap.Add(5, typeof(IActionBinding<,,,,,>));	
			FuncionBindingMap.Add(5, typeof(IFunctionBinding<,,,,,>));	

			ActionBindingMap.Add(6, typeof(IActionBinding<,,,,,,>));	
			FuncionBindingMap.Add(6, typeof(IFunctionBinding<,,,,,,>));	

			ActionBindingMap.Add(7, typeof(IActionBinding<,,,,,,,>));	
			FuncionBindingMap.Add(7, typeof(IFunctionBinding<,,,,,,,>));	

			ActionBindingMap.Add(8, typeof(IActionBinding<,,,,,,,,>));	
			FuncionBindingMap.Add(8, typeof(IFunctionBinding<,,,,,,,,>));	

			FuncionBindingMap.Add(9, typeof(IFunctionBinding<,,,,,,,,,>));	
		}
	}
}