<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension="cs" #>
<#@ include file="T4Toolbox.tt" #>
// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by NCop Copyright Â© <#= DateTime.Today.Year #>
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated
// ------------------------------------------------------------------------------

namespace NCop.Aspects.Extensions
{
	using System;
	using NCop.Aspects.Engine;
	using System.Collections.Generic;

	internal static class MethodBindingResolver
	{
		private static readonly IDictionary<int, Type> funcBindingMap = null;
		private static readonly IDictionary<int, Type> actionBindingMap = null;

		static MethodBindingResolver() {
			funcBindingMap = new Dictionary<int, Type>();
			actionBindingMap = new Dictionary<int, Type>();

			actionBindingMap.Add(0, typeof(IActionBinding<>));				

<#
foreach (var i in Enumerable.Range(1, 8)) {
	string commas = string.Concat(Enumerable.Repeat(",", i));
#>
			funcBindingMap.Add(<#= i #>, typeof(IFunctionBinding<<#= commas #>>));	
			actionBindingMap.Add(<#= i #>, typeof(IActionBinding<<#=commas#>>));	
<#
	if (i == 8) {
		commas += ",";#>

			funcBindingMap.Add(9, typeof(IFunctionBinding<<#= commas #>>));	
<#}
	else{
		WriteLine(""); 
	}
}#>
		}

		internal static Type MakeGenericFunctionBinding(this Type argumentsType, params Type[] typeArguments) {
			int parametersCount = argumentsType.GetGenericArguments().Length;

			return funcBindingMap[parametersCount].MakeGenericType(typeArguments);
		}
		
		internal static Type MakeGenericActionBinding(this Type argumentsType, params Type[] typeArguments) {
			int parametersCount = argumentsType.GetGenericArguments().Length;

			return actionBindingMap[parametersCount].MakeGenericType(typeArguments);
		}
		
		internal static Type MakeGenericPropertyBinding(this Type argumentsType, params Type[] typeArguments) {
			return typeof(IPropertyBinding<,>).MakeGenericType(typeArguments);
		}	
	}
}