<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension="cs" #>
<#@ include file="T4Toolbox.tt" #>
// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by NCop Copyright ©
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated
// ------------------------------------------------------------------------------

namespace NCop.Aspects.Extensions
{
    using System;
    using System.Linq;
	using NCop.Aspects.Engine;
    using System.Collections.Generic;

	internal static class AspectArgsContractResolver
	{
		private static readonly IDictionary<int, Type> funcArgsMap = null;
		private static readonly IDictionary<int, Type> actionArgsMap = null;
		private static readonly IDictionary<int, Type> eventFuncArgsMap = null;
		private static readonly IDictionary<int, Type> eventActionArgsMap = null;

		static AspectArgsContractResolver() {
			funcArgsMap = new Dictionary<int, Type>();
			actionArgsMap = new Dictionary<int, Type>();
			eventFuncArgsMap = new Dictionary<int, Type>();
			eventActionArgsMap = new Dictionary<int, Type>();
			
			actionArgsMap.Add(0, typeof(IActionArgs));
			eventActionArgsMap.Add(0, typeof(IEventActionArgs));

<#
foreach (var i in Enumerable.Range(1, 8)) {
	string commas = string.Concat(Enumerable.Repeat(",", i - 1));
#>
			funcArgsMap.Add(<#= i #>, typeof(IFunctionArgs<<#= commas #>>));	
			actionArgsMap.Add(<#= i #>, typeof(IActionArgs<<#=commas#>>));	
			eventFuncArgsMap.Add(<#= i #>, typeof(IEventFunctionArgs<<#= commas #>>));	
			eventActionArgsMap.Add(<#= i #>, typeof(IEventActionArgs<<#=commas#>>));	
<#
	if (i == 8) {
		commas += ",";#>
			
			funcArgsMap.Add(9, typeof(IFunctionArgs<<#= commas #>>));	
			eventFuncArgsMap.Add(9, typeof(IEventFunctionArgs<<#= commas #>>));	
<#}
	else{
		WriteLine(""); 
	}
}#>
		}

		internal static Type ToFunctionAspectArgumentContract(this Type[] typeArguments) {
			return funcArgsMap[typeArguments.Length].MakeGenericType(typeArguments);
		}

		internal static Type ToEventFunctionAspectArgumentContract(this Type[] typeArguments) {
			return eventFuncArgsMap[typeArguments.Length].MakeGenericType(typeArguments);
		}
		
		internal static Type ToActionAspectArgumentContract(this Type[] typeArguments) {
			 var mappedArgs = actionArgsMap[typeArguments.Length];
            
            if (typeArguments.Length > 0) {
                mappedArgs = mappedArgs.MakeGenericType(typeArguments);

            }

            return mappedArgs;
		}

		internal static Type ToEventActionAspectArgumentContract(this Type[] typeArguments) {
			 var mappedArgs = eventActionArgsMap[typeArguments.Length];
            
            if (typeArguments.Length > 0) {
                mappedArgs = mappedArgs.MakeGenericType(typeArguments);

            }

            return mappedArgs;
		}
		
		internal static Type ToAspectArgumentContract(this Type[] typeArguments, bool isFunction) {
			if (isFunction) {
				return typeArguments.ToFunctionAspectArgumentContract();
			}

			return typeArguments.ToActionAspectArgumentContract();
		}
		
		internal static Type ToAspectArgumentContract(this IEnumerable<Type> typeArguments, bool isFunction) {
			return typeArguments.ToArray().ToAspectArgumentContract(isFunction);
		}
		
		internal static Type ToEventAspectArgumentContract(this Type[] typeArguments, bool isFunction) {
			if (isFunction) {
				return typeArguments.ToEventFunctionAspectArgumentContract();
			}

			return typeArguments.ToEventActionAspectArgumentContract();
		}
		
		internal static Type ToEventAspectArgumentContract(this IEnumerable<Type> typeArguments, bool isFunction) {
			return typeArguments.ToArray().ToEventAspectArgumentContract(isFunction);
		}	
	}
}