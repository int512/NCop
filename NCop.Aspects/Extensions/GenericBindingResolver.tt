<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file="T4Toolbox.tt" #><#+
public class GenericBindingResolver : CSharpTemplate
{	
    public string AcionBinding { get; set; }

	public string FunctionBinding { get; set; }

	public bool GenerateInterfaces { get; set; }

	public string BindingResolverType { get; set; }

	public override string TransformText()
	{
	   var prefix = GenerateInterfaces ? "I" : string.Empty; 
	#>
// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by NCop Copyright ©
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated
// ------------------------------------------------------------------------------
namespace NCop.Aspects.Extensions
{
	using System;
	using NCop.Aspects.Engine;
	using System.Collections.Generic;

	internal static partial class <#=BindingResolverType#>
	{
		internal static readonly IDictionary<int, Type> ActionMap = null;
		internal static readonly IDictionary<int, Type> FunctionMap = null;
 
 		static <#=BindingResolverType#>() {
			FunctionMap = new Dictionary<int, Type>();
			ActionMap = new Dictionary<int, Type>();

			ActionMap.Add(0, typeof(<#=prefix#><#=AcionBinding#><>));				

<#+
foreach (var i in Enumerable.Range(1, 8)) {
	string commas = string.Concat(Enumerable.Repeat(",", i));
#>
			ActionMap.Add(<#= i #>, typeof(<#=prefix#><#=AcionBinding#><<#=commas#>>));	
			FunctionMap.Add(<#= i #>, typeof(<#=prefix#><#=FunctionBinding#><<#= commas #>>));	
<#+
	if (i == 8) {
		commas += ",";#>

			FunctionMap.Add(9, typeof(<#=prefix#><#=FunctionBinding#><<#= commas #>>));	
<#+}
	else{
		WriteLine(""); 
	}
}#>
		}
	}
}
<#+    return this.GenerationEnvironment.ToString();	
    }
}
#>
