// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by NCop Copyright ©
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using NCop.Aspects.Engine;
using System.Collections.Generic;

namespace NCop.Aspects.Extensions
{
	internal static class AspectArgsImplResolver
	{
		private static readonly IDictionary<int, Type> funcExecutionArgsMap = null;
		private static readonly IDictionary<int, Type> actionExecutionArgsMap = null;
		private static readonly IDictionary<int, Type> funcInterceptionArgsMap = null;
		private static readonly IDictionary<int, Type> actionInterceptionArgsMap = null;

		static AspectArgsImplResolver() {
			funcExecutionArgsMap = new Dictionary<int, Type>();
			actionExecutionArgsMap = new Dictionary<int, Type>();
			funcInterceptionArgsMap = new Dictionary<int, Type>();
			actionInterceptionArgsMap = new Dictionary<int, Type>();

			actionExecutionArgsMap.Add(0, typeof(ActionExecutionArgsImpl<>));	
			actionInterceptionArgsMap.Add(0, typeof(ActionInterceptionArgsImpl<>));

			actionExecutionArgsMap.Add(1, typeof(ActionExecutionArgsImpl<,>));	
			funcExecutionArgsMap.Add(1, typeof(FunctionExecutionArgsImpl<,>));	
			actionInterceptionArgsMap.Add(1, typeof(ActionInterceptionArgsImpl<,>));	
			funcInterceptionArgsMap.Add(1, typeof(FunctionInterceptionArgsImpl<,>));							

			actionExecutionArgsMap.Add(2, typeof(ActionExecutionArgsImpl<,,>));	
			funcExecutionArgsMap.Add(2, typeof(FunctionExecutionArgsImpl<,,>));	
			actionInterceptionArgsMap.Add(2, typeof(ActionInterceptionArgsImpl<,,>));	
			funcInterceptionArgsMap.Add(2, typeof(FunctionInterceptionArgsImpl<,,>));							

			actionExecutionArgsMap.Add(3, typeof(ActionExecutionArgsImpl<,,,>));	
			funcExecutionArgsMap.Add(3, typeof(FunctionExecutionArgsImpl<,,,>));	
			actionInterceptionArgsMap.Add(3, typeof(ActionInterceptionArgsImpl<,,,>));	
			funcInterceptionArgsMap.Add(3, typeof(FunctionInterceptionArgsImpl<,,,>));							

			actionExecutionArgsMap.Add(4, typeof(ActionExecutionArgsImpl<,,,,>));	
			funcExecutionArgsMap.Add(4, typeof(FunctionExecutionArgsImpl<,,,,>));	
			actionInterceptionArgsMap.Add(4, typeof(ActionInterceptionArgsImpl<,,,,>));	
			funcInterceptionArgsMap.Add(4, typeof(FunctionInterceptionArgsImpl<,,,,>));							

			actionExecutionArgsMap.Add(5, typeof(ActionExecutionArgsImpl<,,,,,>));	
			funcExecutionArgsMap.Add(5, typeof(FunctionExecutionArgsImpl<,,,,,>));	
			actionInterceptionArgsMap.Add(5, typeof(ActionInterceptionArgsImpl<,,,,,>));	
			funcInterceptionArgsMap.Add(5, typeof(FunctionInterceptionArgsImpl<,,,,,>));							

			actionExecutionArgsMap.Add(6, typeof(ActionExecutionArgsImpl<,,,,,,>));	
			funcExecutionArgsMap.Add(6, typeof(FunctionExecutionArgsImpl<,,,,,,>));	
			actionInterceptionArgsMap.Add(6, typeof(ActionInterceptionArgsImpl<,,,,,,>));	
			funcInterceptionArgsMap.Add(6, typeof(FunctionInterceptionArgsImpl<,,,,,,>));							

			actionExecutionArgsMap.Add(7, typeof(ActionExecutionArgsImpl<,,,,,,,>));	
			funcExecutionArgsMap.Add(7, typeof(FunctionExecutionArgsImpl<,,,,,,,>));	
			actionInterceptionArgsMap.Add(7, typeof(ActionInterceptionArgsImpl<,,,,,,,>));	
			funcInterceptionArgsMap.Add(7, typeof(FunctionInterceptionArgsImpl<,,,,,,,>));							

			actionExecutionArgsMap.Add(8, typeof(ActionExecutionArgsImpl<,,,,,,,,>));	
			funcExecutionArgsMap.Add(8, typeof(FunctionExecutionArgsImpl<,,,,,,,,>));	
			actionInterceptionArgsMap.Add(8, typeof(ActionInterceptionArgsImpl<,,,,,,,,>));	
			funcInterceptionArgsMap.Add(8, typeof(FunctionInterceptionArgsImpl<,,,,,,,,>));							
			
			funcExecutionArgsMap.Add(9, typeof(FunctionExecutionArgsImpl<,,,,,,,,,>));	
			funcInterceptionArgsMap.Add(9, typeof(FunctionInterceptionArgsImpl<,,,,,,,,,>));							
		}

		internal static Type MakeGenericArgsType(this Type argumentsType, params Type[] typeArguments) {
			Type type = null;
			int parametersCount = argumentsType.GetGenericArguments().Length;

			 if (typeof(IPropertyInterceptionArgs).IsAssignableFrom(argumentsType)) {
                type = typeof(PropertyInterceptionArgsImpl<,>);
            }
			else if (typeof(IFunctionInterceptionArgs).IsAssignableFrom(argumentsType)) {
				type = funcInterceptionArgsMap[parametersCount];
			}
			else if (typeof(IActionInterceptionArgs).IsAssignableFrom(argumentsType)) {
				type = actionInterceptionArgsMap[parametersCount];
			}
			else if (typeof(IFunctionExecutionArgs).IsAssignableFrom(argumentsType)) {
				type = funcExecutionArgsMap[parametersCount];
			}
			else {
				type = actionExecutionArgsMap[parametersCount];
			}

			return type.MakeGenericType(typeArguments);
		}

		internal static bool IsFunctionAspectArgs(this Type argumentsType) {
			return typeof(IFunctionExecutionArgs).IsAssignableFrom(argumentsType)||
				   typeof(IFunctionInterceptionArgs).IsAssignableFrom(argumentsType);
		}
	}
}