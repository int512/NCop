// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by NCop Copyright ©
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace NCop.Aspects.Extensions
{
	using System;
	using System.Reflection;
	using NCop.Aspects.Engine;
	using NCop.Core.Extensions;
	using System.Collections.Generic;

	internal static class AspectArgsImplResolver
	{
		private static readonly IDictionary<int, Type> funcEventArgsMap = null;
		private static readonly IDictionary<int, Type> actionEventArgsMap = null;
		private static readonly IDictionary<int, Type> funcExecutionArgsMap = null;
		private static readonly IDictionary<int, Type> actionExecutionArgsMap = null;
		private static readonly IDictionary<int, Type> funcInterceptionArgsMap = null;
		private static readonly IDictionary<int, Type> actionInterceptionArgsMap = null;

		static AspectArgsImplResolver() {
			funcEventArgsMap = new Dictionary<int, Type>();
			actionEventArgsMap = new Dictionary<int, Type>();
			funcExecutionArgsMap = new Dictionary<int, Type>();
			actionExecutionArgsMap = new Dictionary<int, Type>();
			funcInterceptionArgsMap = new Dictionary<int, Type>();
			actionInterceptionArgsMap = new Dictionary<int, Type>();

			actionExecutionArgsMap.Add(0, typeof(ActionExecutionArgsImpl<>));	
			actionInterceptionArgsMap.Add(0, typeof(ActionInterceptionArgsImpl<>));

			funcExecutionArgsMap.Add(1, typeof(FunctionExecutionArgsImpl<,>));	
			actionExecutionArgsMap.Add(1, typeof(ActionExecutionArgsImpl<,>));	
			funcEventArgsMap.Add(1, typeof(EventFunctionInterceptionArgsImpl<,>));
			actionEventArgsMap.Add(1, typeof(EventActionInterceptionArgsImpl<,>));
			actionInterceptionArgsMap.Add(1, typeof(ActionInterceptionArgsImpl<,>));	
			funcInterceptionArgsMap.Add(1, typeof(FunctionInterceptionArgsImpl<,>));							

			funcExecutionArgsMap.Add(2, typeof(FunctionExecutionArgsImpl<,,>));	
			actionExecutionArgsMap.Add(2, typeof(ActionExecutionArgsImpl<,,>));	
			funcEventArgsMap.Add(2, typeof(EventFunctionInterceptionArgsImpl<,,>));
			actionEventArgsMap.Add(2, typeof(EventActionInterceptionArgsImpl<,,>));
			actionInterceptionArgsMap.Add(2, typeof(ActionInterceptionArgsImpl<,,>));	
			funcInterceptionArgsMap.Add(2, typeof(FunctionInterceptionArgsImpl<,,>));							

			funcExecutionArgsMap.Add(3, typeof(FunctionExecutionArgsImpl<,,,>));	
			actionExecutionArgsMap.Add(3, typeof(ActionExecutionArgsImpl<,,,>));	
			funcEventArgsMap.Add(3, typeof(EventFunctionInterceptionArgsImpl<,,,>));
			actionEventArgsMap.Add(3, typeof(EventActionInterceptionArgsImpl<,,,>));
			actionInterceptionArgsMap.Add(3, typeof(ActionInterceptionArgsImpl<,,,>));	
			funcInterceptionArgsMap.Add(3, typeof(FunctionInterceptionArgsImpl<,,,>));							

			funcExecutionArgsMap.Add(4, typeof(FunctionExecutionArgsImpl<,,,,>));	
			actionExecutionArgsMap.Add(4, typeof(ActionExecutionArgsImpl<,,,,>));	
			funcEventArgsMap.Add(4, typeof(EventFunctionInterceptionArgsImpl<,,,,>));
			actionEventArgsMap.Add(4, typeof(EventActionInterceptionArgsImpl<,,,,>));
			actionInterceptionArgsMap.Add(4, typeof(ActionInterceptionArgsImpl<,,,,>));	
			funcInterceptionArgsMap.Add(4, typeof(FunctionInterceptionArgsImpl<,,,,>));							

			funcExecutionArgsMap.Add(5, typeof(FunctionExecutionArgsImpl<,,,,,>));	
			actionExecutionArgsMap.Add(5, typeof(ActionExecutionArgsImpl<,,,,,>));	
			funcEventArgsMap.Add(5, typeof(EventFunctionInterceptionArgsImpl<,,,,,>));
			actionEventArgsMap.Add(5, typeof(EventActionInterceptionArgsImpl<,,,,,>));
			actionInterceptionArgsMap.Add(5, typeof(ActionInterceptionArgsImpl<,,,,,>));	
			funcInterceptionArgsMap.Add(5, typeof(FunctionInterceptionArgsImpl<,,,,,>));							

			funcExecutionArgsMap.Add(6, typeof(FunctionExecutionArgsImpl<,,,,,,>));	
			actionExecutionArgsMap.Add(6, typeof(ActionExecutionArgsImpl<,,,,,,>));	
			funcEventArgsMap.Add(6, typeof(EventFunctionInterceptionArgsImpl<,,,,,,>));
			actionEventArgsMap.Add(6, typeof(EventActionInterceptionArgsImpl<,,,,,,>));
			actionInterceptionArgsMap.Add(6, typeof(ActionInterceptionArgsImpl<,,,,,,>));	
			funcInterceptionArgsMap.Add(6, typeof(FunctionInterceptionArgsImpl<,,,,,,>));							

			funcExecutionArgsMap.Add(7, typeof(FunctionExecutionArgsImpl<,,,,,,,>));	
			actionExecutionArgsMap.Add(7, typeof(ActionExecutionArgsImpl<,,,,,,,>));	
			funcEventArgsMap.Add(7, typeof(EventFunctionInterceptionArgsImpl<,,,,,,,>));
			actionEventArgsMap.Add(7, typeof(EventActionInterceptionArgsImpl<,,,,,,,>));
			actionInterceptionArgsMap.Add(7, typeof(ActionInterceptionArgsImpl<,,,,,,,>));	
			funcInterceptionArgsMap.Add(7, typeof(FunctionInterceptionArgsImpl<,,,,,,,>));							

			funcExecutionArgsMap.Add(8, typeof(FunctionExecutionArgsImpl<,,,,,,,,>));	
			actionExecutionArgsMap.Add(8, typeof(ActionExecutionArgsImpl<,,,,,,,,>));	
			funcEventArgsMap.Add(8, typeof(EventFunctionInterceptionArgsImpl<,,,,,,,,>));
			actionEventArgsMap.Add(8, typeof(EventActionInterceptionArgsImpl<,,,,,,,,>));
			actionInterceptionArgsMap.Add(8, typeof(ActionInterceptionArgsImpl<,,,,,,,,>));	
			funcInterceptionArgsMap.Add(8, typeof(FunctionInterceptionArgsImpl<,,,,,,,,>));							
			
			funcExecutionArgsMap.Add(9, typeof(FunctionExecutionArgsImpl<,,,,,,,,,>));	
			funcEventArgsMap.Add(9, typeof(EventFunctionInterceptionArgsImpl<,,,,,,,,,>));
			funcInterceptionArgsMap.Add(9, typeof(FunctionInterceptionArgsImpl<,,,,,,,,,>));							
		}

		internal static Type MakeGenericArgsType(this Type argumentsType, MethodInfo aspectMember, params Type[] typeArguments) {
			Type type = null;
			int parametersCount = argumentsType.GetGenericArguments().Length;

			if (typeof(IEventFunctionInterceptionArgs).IsAssignableFrom(argumentsType)) {
                type = funcEventArgsMap[parametersCount];
            }
            else if (typeof(IEventActionInterceptionArgs).IsAssignableFrom(argumentsType)) {
                type = actionEventArgsMap[parametersCount];
            }
			else if (typeof(IPropertyInterceptionArgs).IsAssignableFrom(argumentsType)) {
                type = aspectMember.HasReturnType() ? typeof(GetPropertyInterceptionArgsImpl<,>) : typeof(SetPropertyInterceptionArgsImpl<,>);
            }
			else if (typeof(IFunctionInterceptionArgs).IsAssignableFrom(argumentsType)) {
				type = funcInterceptionArgsMap[parametersCount];
			}
			else if (typeof(IActionInterceptionArgs).IsAssignableFrom(argumentsType)) {
				type = actionInterceptionArgsMap[parametersCount];
			}
			else if (typeof(IFunctionExecutionArgs).IsAssignableFrom(argumentsType)) {
				type = funcExecutionArgsMap[parametersCount];
			}
			else {
				type = actionExecutionArgsMap[parametersCount];
			}

			return type.MakeGenericType(typeArguments);
		}

		internal static bool IsFunctionAspectArgs(this Type argumentsType) {
			return typeof(IFunctionExecutionArgs).IsAssignableFrom(argumentsType)||
				   typeof(IFunctionInterceptionArgs).IsAssignableFrom(argumentsType);
		}
	}
}