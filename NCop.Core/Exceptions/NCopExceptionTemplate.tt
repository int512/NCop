<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file="T4Toolbox.tt" #><#+
public class NCopExceptionTemplate : CSharpTemplate
{	
	private string name = System.IO.Path.GetFileNameWithoutExtension(TransformationContext.Current.Host.TemplateFile);
		
	public string Namespace { get; set; }

	public string KeyPrefix { get; set; }

	public string Message { get; set; }

	public IEnumerable<Tuple<string, string>> Arguments { get; set; }

	private string properties = string.Empty;
	private string constructor = string.Empty;
	private string getObjectData = string.Empty;
	private string constructorArguments = string.Empty;
	private string protectedConstructor = string.Empty;
	
	private string ToCamelCase(string value) {
		string first = value.First().ToString().ToUpper();
		string second = string.Join("", value.Skip(1));

		return first + second;
	}

	private void BuildArguments() {
		if (Arguments != null) {
                StringBuilder constructorBuilder = new StringBuilder("\n\t\t\t: base(null) {\n");
                StringBuilder constructorArgumentsBuilder = new StringBuilder(string.Format("\n\t\tpublic {0}(", name));
                StringBuilder protectedConstructorBuilder = new StringBuilder();
                StringBuilder getObjectDataBuilder = new StringBuilder();
				StringBuilder propertiesBuilder = new StringBuilder();

                foreach (var arg in Arguments) {
                    string camelCase = ToCamelCase(arg.Item1);
                    constructorBuilder.AppendFormat("\t\t\t{0} = {1};\n", camelCase, arg.Item1);
                    constructorArgumentsBuilder.AppendFormat("{0} {1}, ", arg.Item2, arg.Item1);
					propertiesBuilder.AppendFormat("public {0} {1}", arg.Item2, camelCase).Append(" { get; protected set; }");
					protectedConstructorBuilder.Append("\n\t\t\tvalue = ")
											   .AppendFormat("info.GetValue(\"{0}{1}\", typeof({1}));\n", KeyPrefix, arg.Item2)
											   .Append("\n\t\t\tif (value != null) {\n\t\t\t")
											   .AppendFormat("\t{0} = ({1})value;\n", camelCase, arg.Item2)
											   .Append("\t\t\t}");

					getObjectDataBuilder.AppendFormat("\n\t\t\tinfo.AddValue(\"{0}{1}\", {1}, typeof({2}));", KeyPrefix, camelCase, arg.Item2);
					constructorBuilder.AppendFormat("\t\t\tmessage = {0}", Message); 
					constructorArgumentsBuilder = constructorArgumentsBuilder.Remove(constructorArgumentsBuilder.Length - 2, 2);
					constructorBuilder.Append("\n\t\t}");
					constructorArgumentsBuilder.Append(")").Append(constructorBuilder.ToString()).Append("\n\t\t}");
					constructor = constructorArgumentsBuilder.Remove(constructorArgumentsBuilder.Length - 2, 2).ToString();
					properties = propertiesBuilder.Append(Environment.NewLine).ToString();
					protectedConstructor = protectedConstructorBuilder.ToString();
					getObjectData = getObjectDataBuilder.ToString();
				}
            }
	}

	public override string TransformText()
	{
#>
// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by NCop Copyright ©
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated
// ------------------------------------------------------------------------------

<#+ BuildArguments(); #>
namespace <#= Namespace ?? DefaultNamespace  #>
{
	using System;
	using NCop.Core.Extensions;
	using System.Runtime.Serialization;
	
	[Serializable]
	public class <#= name #> : SystemException, ISerializable
	{
        private readonly string message = string.Empty;
		private readonly bool messageInitialized = false;
		<#+ if (!string.IsNullOrEmpty(Message) && Arguments == null) {#>
		
		public <#= name #>() 
		    : this("<#= Message #>") {
        }
		<#+}#>

        public <#= name #>(string message) 
		    : base(message) {
            messageInitialized = true;
        }

        public <#= name #>(string message, Exception innerException) 
		    : base(message, innerException) {
            messageInitialized = true;
        }
		<#= constructor #>
		<#= properties #>
		public override string Message {
            get {
                if (messageInitialized) {
                    return base.Message;
                }

                return message;
            }
        }
		
		protected <#= name #>(SerializationInfo info, StreamingContext context)
            : base(info, context) {
<#+ if (Arguments != null) { #>
			object value = null;
<#+ } #>

            if (info == null) {
                throw new ArgumentNullException("info");
            }

            message = info.GetString("<#= KeyPrefix #>Message");<#= protectedConstructor #>
        }

        public override void GetObjectData(SerializationInfo info, StreamingContext context) {
            if (info == null) {
                throw new ArgumentNullException("info");
            }

            base.GetObjectData(info, context);
            info.AddValue("<#= KeyPrefix #>Message", Message);<#= getObjectData #>
        }
	}	
}<#+ return this.GenerationEnvironment.ToString();	}}#>